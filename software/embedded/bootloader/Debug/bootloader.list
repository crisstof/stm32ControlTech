
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800103c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  00000000  00000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000080  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000008c  2000008c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000092d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001226  00000000  00000000  00029315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000978  00000000  00000000  0002a540  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  0002aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004f84  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003437  00000000  00000000  0003070c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033b43  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000275c  00000000  00000000  00033bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003631c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001014 	.word	0x08001014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001014 	.word	0x08001014

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f8cb 	bl	800036e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	200f      	movs	r0, #15
 80001da:	f000 fdd3 	bl	8000d84 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f000 fa9d 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <HAL_IncTick+0x20>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x24>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <HAL_IncTick+0x24>)
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000004 	.word	0x20000004
 800021c:	2000003c 	.word	0x2000003c

08000220 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <NVIC_SetPriorityGrouping+0x44>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800023c:	4013      	ands	r3, r2
 800023e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800024c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <NVIC_SetPriorityGrouping+0x44>)
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028e:	4909      	ldr	r1, [pc, #36]	; (80002b4 <NVIC_EnableIRQ+0x30>)
 8000290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000294:	095b      	lsrs	r3, r3, #5
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	f002 021f 	and.w	r2, r2, #31
 800029c:	2001      	movs	r0, #1
 800029e:	fa00 f202 	lsl.w	r2, r0, r2
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	490d      	ldr	r1, [pc, #52]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	3b04      	subs	r3, #4
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	4908      	ldr	r1, [pc, #32]	; (8000308 <NVIC_SetPriority+0x50>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	1e5a      	subs	r2, r3, #1
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	401a      	ands	r2, r3
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000352:	2101      	movs	r1, #1
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	1e59      	subs	r1, r3, #1
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	4313      	orrs	r3, r2
         );
}
 8000362:	4618      	mov	r0, r3
 8000364:	3724      	adds	r7, #36	; 0x24
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f7ff ff52 	bl	8000220 <NVIC_SetPriorityGrouping>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000396:	f7ff ff67 	bl	8000268 <NVIC_GetPriorityGrouping>
 800039a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	68b9      	ldr	r1, [r7, #8]
 80003a0:	6978      	ldr	r0, [r7, #20]
 80003a2:	f7ff ffb3 	bl	800030c <NVIC_EncodePriority>
 80003a6:	4602      	mov	r2, r0
 80003a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ac:	4611      	mov	r1, r2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff82 	bl	80002b8 <NVIC_SetPriority>
}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff5a 	bl	8000284 <NVIC_EnableIRQ>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003e6:	e17f      	b.n	80006e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f000 8171 	beq.w	80006e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	f003 0303 	and.w	r3, r3, #3
 8000408:	2b01      	cmp	r3, #1
 800040a:	d005      	beq.n	8000418 <HAL_GPIO_Init+0x40>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	f003 0303 	and.w	r3, r3, #3
 8000414:	2b02      	cmp	r3, #2
 8000416:	d130      	bne.n	800047a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	2203      	movs	r2, #3
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	4013      	ands	r3, r2
 800042e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	68da      	ldr	r2, [r3, #12]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	693a      	ldr	r2, [r7, #16]
 800043e:	4313      	orrs	r3, r2
 8000440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800044e:	2201      	movs	r2, #1
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	43db      	mvns	r3, r3
 8000458:	693a      	ldr	r2, [r7, #16]
 800045a:	4013      	ands	r3, r2
 800045c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	f003 0201 	and.w	r2, r3, #1
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	4313      	orrs	r3, r2
 8000472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b03      	cmp	r3, #3
 8000484:	d118      	bne.n	80004b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800048c:	2201      	movs	r2, #1
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	4013      	ands	r3, r2
 800049a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	f003 0201 	and.w	r2, r3, #1
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	693a      	ldr	r2, [r7, #16]
 80004b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d017      	beq.n	80004f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2203      	movs	r2, #3
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	693a      	ldr	r2, [r7, #16]
 80004f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f003 0303 	and.w	r3, r3, #3
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d123      	bne.n	8000548 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	08da      	lsrs	r2, r3, #3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3208      	adds	r2, #8
 8000508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	220f      	movs	r2, #15
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	691a      	ldr	r2, [r3, #16]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	4313      	orrs	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	08da      	lsrs	r2, r3, #3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3208      	adds	r2, #8
 8000542:	6939      	ldr	r1, [r7, #16]
 8000544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	2203      	movs	r2, #3
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f003 0203 	and.w	r2, r3, #3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4313      	orrs	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000584:	2b00      	cmp	r3, #0
 8000586:	f000 80ac 	beq.w	80006e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4a5e      	ldr	r2, [pc, #376]	; (8000704 <HAL_GPIO_Init+0x32c>)
 800058c:	4b5d      	ldr	r3, [pc, #372]	; (8000704 <HAL_GPIO_Init+0x32c>)
 800058e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6613      	str	r3, [r2, #96]	; 0x60
 8000596:	4b5b      	ldr	r3, [pc, #364]	; (8000704 <HAL_GPIO_Init+0x32c>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80005a2:	4a59      	ldr	r2, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x330>)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	089b      	lsrs	r3, r3, #2
 80005a8:	3302      	adds	r3, #2
 80005aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	220f      	movs	r2, #15
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005cc:	d025      	beq.n	800061a <HAL_GPIO_Init+0x242>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a4e      	ldr	r2, [pc, #312]	; (800070c <HAL_GPIO_Init+0x334>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d01f      	beq.n	8000616 <HAL_GPIO_Init+0x23e>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <HAL_GPIO_Init+0x338>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d019      	beq.n	8000612 <HAL_GPIO_Init+0x23a>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4c      	ldr	r2, [pc, #304]	; (8000714 <HAL_GPIO_Init+0x33c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x236>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4b      	ldr	r2, [pc, #300]	; (8000718 <HAL_GPIO_Init+0x340>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x232>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a4a      	ldr	r2, [pc, #296]	; (800071c <HAL_GPIO_Init+0x344>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x22e>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a49      	ldr	r2, [pc, #292]	; (8000720 <HAL_GPIO_Init+0x348>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x22a>
 80005fe:	2306      	movs	r3, #6
 8000600:	e00c      	b.n	800061c <HAL_GPIO_Init+0x244>
 8000602:	2307      	movs	r3, #7
 8000604:	e00a      	b.n	800061c <HAL_GPIO_Init+0x244>
 8000606:	2305      	movs	r3, #5
 8000608:	e008      	b.n	800061c <HAL_GPIO_Init+0x244>
 800060a:	2304      	movs	r3, #4
 800060c:	e006      	b.n	800061c <HAL_GPIO_Init+0x244>
 800060e:	2303      	movs	r3, #3
 8000610:	e004      	b.n	800061c <HAL_GPIO_Init+0x244>
 8000612:	2302      	movs	r3, #2
 8000614:	e002      	b.n	800061c <HAL_GPIO_Init+0x244>
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <HAL_GPIO_Init+0x244>
 800061a:	2300      	movs	r3, #0
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	f002 0203 	and.w	r2, r2, #3
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	4093      	lsls	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4313      	orrs	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800062c:	4936      	ldr	r1, [pc, #216]	; (8000708 <HAL_GPIO_Init+0x330>)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	089b      	lsrs	r3, r3, #2
 8000632:	3302      	adds	r3, #2
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <HAL_GPIO_Init+0x34c>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	43db      	mvns	r3, r3
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4313      	orrs	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800065e:	4a31      	ldr	r2, [pc, #196]	; (8000724 <HAL_GPIO_Init+0x34c>)
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <HAL_GPIO_Init+0x34c>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	43db      	mvns	r3, r3
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <HAL_GPIO_Init+0x34c>)
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <HAL_GPIO_Init+0x34c>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	43db      	mvns	r3, r3
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4013      	ands	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_GPIO_Init+0x34c>)
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_GPIO_Init+0x34c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4313      	orrs	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <HAL_GPIO_Init+0x34c>)
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa22 f303 	lsr.w	r3, r2, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f47f ae78 	bne.w	80003e8 <HAL_GPIO_Init+0x10>
  }
}
 80006f8:	bf00      	nop
 80006fa:	371c      	adds	r7, #28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000
 800070c:	48000400 	.word	0x48000400
 8000710:	48000800 	.word	0x48000800
 8000714:	48000c00 	.word	0x48000c00
 8000718:	48001000 	.word	0x48001000
 800071c:	48001400 	.word	0x48001400
 8000720:	48001800 	.word	0x48001800
 8000724:	40010400 	.word	0x40010400

08000728 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_RCC_GetHCLKFreq+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008

08000750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000754:	f7ff fff0 	bl	8000738 <HAL_RCC_GetHCLKFreq>
 8000758:	4601      	mov	r1, r0
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	f003 0307 	and.w	r3, r3, #7
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	0800102c 	.word	0x0800102c

0800077c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	220f      	movs	r2, #15
 800078a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_RCC_GetClockConfig+0x5c>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 0203 	and.w	r2, r3, #3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_RCC_GetClockConfig+0x5c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_RCC_GetClockConfig+0x5c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_RCC_GetClockConfig+0x5c>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_RCC_GetClockConfig+0x60>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0207 	and.w	r2, r3, #7
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e049      	b.n	8000886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f841 	bl	800088e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2202      	movs	r2, #2
 8000810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3304      	adds	r3, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f000 f9f8 	bl	8000c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2201      	movs	r2, #1
 8000828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2201      	movs	r2, #1
 8000860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d001      	beq.n	80008bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e04f      	b.n	800095c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2202      	movs	r2, #2
 80008c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	68d2      	ldr	r2, [r2, #12]
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a23      	ldr	r2, [pc, #140]	; (8000968 <HAL_TIM_Base_Start_IT+0xc4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d01d      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e6:	d018      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_TIM_Base_Start_IT+0xc8>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d013      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_TIM_Base_Start_IT+0xcc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d00e      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <HAL_TIM_Base_Start_IT+0xd0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d009      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_TIM_Base_Start_IT+0xd4>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d004      	beq.n	800091a <HAL_TIM_Base_Start_IT+0x76>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_TIM_Base_Start_IT+0xd8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d115      	bne.n	8000946 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_TIM_Base_Start_IT+0xdc>)
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2b06      	cmp	r3, #6
 800092a:	d015      	beq.n	8000958 <HAL_TIM_Base_Start_IT+0xb4>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000932:	d011      	beq.n	8000958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	f042 0201 	orr.w	r2, r2, #1
 8000942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000944:	e008      	b.n	8000958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	f042 0201 	orr.w	r2, r2, #1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e000      	b.n	800095a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40012c00 	.word	0x40012c00
 800096c:	40000400 	.word	0x40000400
 8000970:	40000800 	.word	0x40000800
 8000974:	40000c00 	.word	0x40000c00
 8000978:	40013400 	.word	0x40013400
 800097c:	40014000 	.word	0x40014000
 8000980:	00010007 	.word	0x00010007

08000984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b02      	cmp	r3, #2
 8000998:	d122      	bne.n	80009e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d11b      	bne.n	80009e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f06f 0202 	mvn.w	r2, #2
 80009b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f905 	bl	8000bd6 <HAL_TIM_IC_CaptureCallback>
 80009cc:	e005      	b.n	80009da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f8f7 	bl	8000bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f908 	bl	8000bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d122      	bne.n	8000a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d11b      	bne.n	8000a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f06f 0204 	mvn.w	r2, #4
 8000a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2202      	movs	r2, #2
 8000a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f8db 	bl	8000bd6 <HAL_TIM_IC_CaptureCallback>
 8000a20:	e005      	b.n	8000a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f8cd 	bl	8000bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f8de 	bl	8000bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d122      	bne.n	8000a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d11b      	bne.n	8000a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f06f 0208 	mvn.w	r2, #8
 8000a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f8b1 	bl	8000bd6 <HAL_TIM_IC_CaptureCallback>
 8000a74:	e005      	b.n	8000a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f8a3 	bl	8000bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f8b4 	bl	8000bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d122      	bne.n	8000adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d11b      	bne.n	8000adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f06f 0210 	mvn.w	r2, #16
 8000aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f887 	bl	8000bd6 <HAL_TIM_IC_CaptureCallback>
 8000ac8:	e005      	b.n	8000ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f879 	bl	8000bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f88a 	bl	8000bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d10e      	bne.n	8000b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f06f 0201 	mvn.w	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f9c2 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	2b80      	cmp	r3, #128	; 0x80
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b20:	2b80      	cmp	r3, #128	; 0x80
 8000b22:	d107      	bne.n	8000b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f914 	bl	8000d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b42:	d10e      	bne.n	8000b62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	2b80      	cmp	r3, #128	; 0x80
 8000b50:	d107      	bne.n	8000b62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f907 	bl	8000d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6c:	2b40      	cmp	r3, #64	; 0x40
 8000b6e:	d10e      	bne.n	8000b8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d107      	bne.n	8000b8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f838 	bl	8000bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	f003 0320 	and.w	r3, r3, #32
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d10e      	bne.n	8000bba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d107      	bne.n	8000bba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f06f 0220 	mvn.w	r2, #32
 8000bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f8c7 	bl	8000d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <TIM_Base_SetConfig+0x114>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <TIM_Base_SetConfig+0x40>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c32:	d00f      	beq.n	8000c54 <TIM_Base_SetConfig+0x40>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <TIM_Base_SetConfig+0x118>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00b      	beq.n	8000c54 <TIM_Base_SetConfig+0x40>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3c      	ldr	r2, [pc, #240]	; (8000d30 <TIM_Base_SetConfig+0x11c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <TIM_Base_SetConfig+0x40>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3b      	ldr	r2, [pc, #236]	; (8000d34 <TIM_Base_SetConfig+0x120>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <TIM_Base_SetConfig+0x40>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <TIM_Base_SetConfig+0x124>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d108      	bne.n	8000c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <TIM_Base_SetConfig+0x114>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d01f      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d01b      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <TIM_Base_SetConfig+0x118>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d017      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <TIM_Base_SetConfig+0x11c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <TIM_Base_SetConfig+0x120>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00f      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <TIM_Base_SetConfig+0x124>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00b      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <TIM_Base_SetConfig+0x128>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d007      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <TIM_Base_SetConfig+0x12c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d003      	beq.n	8000cae <TIM_Base_SetConfig+0x9a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <TIM_Base_SetConfig+0x130>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d108      	bne.n	8000cc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <TIM_Base_SetConfig+0x114>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00f      	beq.n	8000d0c <TIM_Base_SetConfig+0xf8>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <TIM_Base_SetConfig+0x124>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00b      	beq.n	8000d0c <TIM_Base_SetConfig+0xf8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <TIM_Base_SetConfig+0x128>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <TIM_Base_SetConfig+0xf8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <TIM_Base_SetConfig+0x12c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d003      	beq.n	8000d0c <TIM_Base_SetConfig+0xf8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <TIM_Base_SetConfig+0x130>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d103      	bne.n	8000d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	615a      	str	r2, [r3, #20]
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	40000800 	.word	0x40000800
 8000d34:	40000c00 	.word	0x40000c00
 8000d38:	40013400 	.word	0x40013400
 8000d3c:	40014000 	.word	0x40014000
 8000d40:	40014400 	.word	0x40014400
 8000d44:	40014800 	.word	0x40014800

08000d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_InitTick+0xf0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d062      	beq.n	8000e60 <HAL_InitTick+0xdc>
  {
    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <HAL_InitTick+0xf4>)
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_InitTick+0xf4>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_InitTick+0xf4>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db2:	f107 0210 	add.w	r2, r7, #16
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fcdd 	bl	800077c <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Compute TIM6 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d103      	bne.n	8000dd4 <HAL_InitTick+0x50>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dcc:	f7ff fcc0 	bl	8000750 <HAL_RCC_GetPCLK1Freq>
 8000dd0:	6378      	str	r0, [r7, #52]	; 0x34
 8000dd2:	e004      	b.n	8000dde <HAL_InitTick+0x5a>
    }
    else
    {
      uwTimclock = 2U * HAL_RCC_GetPCLK1Freq();
 8000dd4:	f7ff fcbc 	bl	8000750 <HAL_RCC_GetPCLK1Freq>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <HAL_InitTick+0xf8>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9b      	lsrs	r3, r3, #18
 8000de8:	3b01      	subs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Initialize TIM6 */
    TimHandle.Instance = TIM6;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_InitTick+0xfc>)
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_InitTick+0x100>)
 8000df0:	601a      	str	r2, [r3, #0]
    + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <HAL_InitTick+0xfc>)
 8000df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df8:	60da      	str	r2, [r3, #12]
    TimHandle.Init.Prescaler = uwPrescalerValue;
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_InitTick+0xfc>)
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	6053      	str	r3, [r2, #4]
    TimHandle.Init.ClockDivision = 0;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_InitTick+0xfc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
    TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_InitTick+0xfc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
    TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xfc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000e12:	481b      	ldr	r0, [pc, #108]	; (8000e80 <HAL_InitTick+0xfc>)
 8000e14:	f7ff fce4 	bl	80007e0 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d11c      	bne.n	8000e58 <HAL_InitTick+0xd4>
    {
      /* Start the TIM time Base generation in interrupt mode */
      if (HAL_TIM_Base_Start_IT(&TimHandle) == HAL_OK)
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <HAL_InitTick+0xfc>)
 8000e20:	f7ff fd40 	bl	80008a4 <HAL_TIM_Base_Start_IT>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d112      	bne.n	8000e50 <HAL_InitTick+0xcc>
      {
        /* Enable the TIM6_DAC global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e2a:	2036      	movs	r0, #54	; 0x36
 8000e2c:	f7ff fac6 	bl	80003bc <HAL_NVIC_EnableIRQ>

        /* Configure the SysTick IRQ priority */
        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d808      	bhi.n	8000e48 <HAL_InitTick+0xc4>
        {
          /*Configure the TIM6_DAC IRQ priority */
          HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e36:	2200      	movs	r2, #0
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	2036      	movs	r0, #54	; 0x36
 8000e3c:	f7ff faa2 	bl	8000384 <HAL_NVIC_SetPriority>
          uwTickPrio = TickPriority;
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <HAL_InitTick+0x104>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00e      	b.n	8000e66 <HAL_InitTick+0xe2>
        }
        else
        {
          status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000e4e:	e00a      	b.n	8000e66 <HAL_InitTick+0xe2>
        }
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000e56:	e006      	b.n	8000e66 <HAL_InitTick+0xe2>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000e5e:	e002      	b.n	8000e66 <HAL_InitTick+0xe2>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }

  /* Return function status */
  return status;
 8000e66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3738      	adds	r7, #56	; 0x38
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000004 	.word	0x20000004
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	20000040 	.word	0x20000040
 8000e84:	40001000 	.word	0x40001000
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000e94:	f7ff f9b0 	bl	80001f8 <HAL_IncTick>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ea6:	f7ff fd6d 	bl	8000984 <HAL_TIM_IRQHandler>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000040 	.word	0x20000040

08000eb4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  int i = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
   HAL_Init() ; //Initialisation comme ma prise en compte des fonctions comme le Delay.
 8000ebe:	f7ff f983 	bl	80001c8 <HAL_Init>
  // SystemClock_config();
   __HAL_RCC_GPIOA_CLK_ENABLE(); //valide la clock GPIOA
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <main+0x50>)
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <main+0x50>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <main+0x50>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

   /*Initialise le port */
   init.Mode = GPIO_MODE_OUTPUT_PP  ;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <main+0x54>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	605a      	str	r2, [r3, #4]
   init.Pull = GPIO_PULLUP;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <main+0x54>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	609a      	str	r2, [r3, #8]
   init.Speed = GPIO_SPEED_FREQ_HIGH ;//HIGH, MEDIUM
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <main+0x54>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	60da      	str	r2, [r3, #12]
   init.Pin = GPIO_PIN_5 ;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <main+0x54>)
 8000eee:	2220      	movs	r2, #32
 8000ef0:	601a      	str	r2, [r3, #0]
   //INITIALISATION
   HAL_GPIO_Init(GPIOA, &init) ;
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <main+0x54>)
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f7ff fa6e 	bl	80003d8 <HAL_GPIO_Init>


   /* Infinite loop */
   while (1)
   {
      i++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e7fb      	b.n	8000efc <main+0x48>
 8000f04:	40021000 	.word	0x40021000
 8000f08:	20000028 	.word	0x20000028

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f12:	e003      	b.n	8000f1c <LoopCopyDataInit>

08000f14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f1a:	3104      	adds	r1, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f24:	d3f6      	bcc.n	8000f14 <CopyDataInit>
	ldr	r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f28:	e002      	b.n	8000f30 <LoopFillZerobss>

08000f2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f2c:	f842 3b04 	str.w	r3, [r2], #4

08000f30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <LoopForever+0x16>)
	cmp	r2, r3
 8000f32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f34:	d3f9      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f36:	f000 f813 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f000 f847 	bl	8000fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff ffb9 	bl	8000eb4 <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f48:	0800103c 	.word	0x0800103c
	ldr	r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f50:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f58:	2000008c 	.word	0x2000008c

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <SystemInit+0x64>)
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <SystemInit+0x64>)
 8000f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <SystemInit+0x68>)
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <SystemInit+0x68>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <SystemInit+0x68>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <SystemInit+0x68>)
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <SystemInit+0x68>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <SystemInit+0x68>)
 8000f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SystemInit+0x68>)
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <SystemInit+0x68>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <SystemInit+0x68>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SystemInit+0x64>)
 8000fb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	40021000 	.word	0x40021000

08000fcc <__libc_init_array>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	4e0d      	ldr	r6, [pc, #52]	; (8001004 <__libc_init_array+0x38>)
 8000fd0:	4c0d      	ldr	r4, [pc, #52]	; (8001008 <__libc_init_array+0x3c>)
 8000fd2:	1ba4      	subs	r4, r4, r6
 8000fd4:	10a4      	asrs	r4, r4, #2
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	42a5      	cmp	r5, r4
 8000fda:	d109      	bne.n	8000ff0 <__libc_init_array+0x24>
 8000fdc:	4e0b      	ldr	r6, [pc, #44]	; (800100c <__libc_init_array+0x40>)
 8000fde:	4c0c      	ldr	r4, [pc, #48]	; (8001010 <__libc_init_array+0x44>)
 8000fe0:	f000 f818 	bl	8001014 <_init>
 8000fe4:	1ba4      	subs	r4, r4, r6
 8000fe6:	10a4      	asrs	r4, r4, #2
 8000fe8:	2500      	movs	r5, #0
 8000fea:	42a5      	cmp	r5, r4
 8000fec:	d105      	bne.n	8000ffa <__libc_init_array+0x2e>
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
 8000ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff4:	4798      	blx	r3
 8000ff6:	3501      	adds	r5, #1
 8000ff8:	e7ee      	b.n	8000fd8 <__libc_init_array+0xc>
 8000ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ffe:	4798      	blx	r3
 8001000:	3501      	adds	r5, #1
 8001002:	e7f2      	b.n	8000fea <__libc_init_array+0x1e>
 8001004:	08001034 	.word	0x08001034
 8001008:	08001034 	.word	0x08001034
 800100c:	08001034 	.word	0x08001034
 8001010:	08001038 	.word	0x08001038

08001014 <_init>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr

08001020 <_fini>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	bf00      	nop
 8001024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001026:	bc08      	pop	{r3}
 8001028:	469e      	mov	lr, r3
 800102a:	4770      	bx	lr
